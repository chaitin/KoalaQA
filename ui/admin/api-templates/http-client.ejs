<%
const { apiConfig, generateResponses, config } = it;
%>
import { message } from "@ctzhian/ui";
import type {
  AxiosInstance,
  AxiosRequestConfig,
  HeadersDefaults,
  ResponseType,
} from "axios";
import axios from "axios";

export type QueryParamsType = Record<string | number, any>;

export interface FullRequestParams
  extends Omit<AxiosRequestConfig, "data" | "params" | "url" | "responseType"> {
  /** set parameter to `true` for call `securityWorker` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseType;
  /** request body */
  body?: unknown;
}

export type RequestParams = Omit<
  FullRequestParams,
  "body" | "method" | "query" | "path"
>;
// CSRF token 缓存
let csrfTokenPromise: Promise<string> | null = null;

// 获取CSRF token的函数
const getCsrfToken = async (): Promise<string> => {
  // 如果正在获取token，等待现有的请求
  if (csrfTokenPromise) {
    return csrfTokenPromise;
  }

  // 创建新的获取token的Promise
  csrfTokenPromise = new Promise(async (resolve, reject) => {
    try {
      const response = await axios.get("/api/csrf", {
        withCredentials: true,
      });

      let token = "";
      if (response.data && response.data.success && response.data.data) {
        token = response.data.data;
      } else if (response.data && typeof response.data === "string") {
        token = response.data;
      }

      if (token) {
        resolve(token);
      } else {
        reject(new Error("Failed to get CSRF token"));
      }
    } catch (error) {
      console.error("Failed to fetch CSRF token:", error);
      reject(error);
    } finally {
      // 清除Promise缓存，允许重试
      csrfTokenPromise = null;
    }
  });

  return csrfTokenPromise;
};

// 清除CSRF token缓存的函数（在token失效时调用）
export const clearCsrfTokenCache = () => {
  csrfTokenPromise = null;
};

export interface ApiConfig<SecurityDataType = unknown>
  extends Omit<AxiosRequestConfig, "data" | "cancelToken"> {
  securityWorker?: (
    securityData: SecurityDataType | null,
  ) => Promise<AxiosRequestConfig | void> | AxiosRequestConfig | void;
  secure?: boolean;
  format?: ResponseType;
}

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

type ExtractDataProp<T> = T extends { data?: infer U } ? U : T


export class HttpClient<SecurityDataType = unknown> {
  public instance: AxiosInstance;
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private secure?: boolean;
  private format?: ResponseType;

  constructor({
    securityWorker,
    secure,
    format,
    ...axiosConfig
  }: ApiConfig<SecurityDataType> = {}) {
    this.instance = axios.create({
      withCredentials: true,
      ...axiosConfig,
      baseURL: axiosConfig.baseURL || "/api",
    });
    this.secure = secure;
    this.format = format;
    this.securityWorker = securityWorker;
    this.instance.interceptors.response.use(
      (response) => {
        if (response.status === 200) {
          const res = response.data;
          if (res.success) {
            return res.data;
          }
          message.error(res.message || "网络异常");
          return Promise.reject(res);
        }
        message.error(response.statusText);
        return Promise.reject(response);
      },
      (error) => {
        // 如果是CSRF token相关错误，清除缓存
        if (error.response?.status === 403 || error.response?.status === 419) {
          clearCsrfTokenCache();
        }
        if (error.response?.status === 401) {
          window.location.href = "/login";
        }
        message.error(error.response?.statusText || "网络异常");
        return Promise.reject(error.response);
      },
    );
    }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected mergeRequestParams(
    params1: AxiosRequestConfig,
    params2?: AxiosRequestConfig,
  ): AxiosRequestConfig {
    const method = params1.method || (params2 && params2.method);

    return {
      ...this.instance.defaults,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...((method &&
          this.instance.defaults.headers[
            method.toLowerCase() as keyof HeadersDefaults
          ]) ||
          {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected stringifyFormItem(formItem: unknown) {
    if (typeof formItem === "object" && formItem !== null) {
      return JSON.stringify(formItem);
    } else {
      return `${formItem}`;
    }
  }

  protected createFormData(input: Record<string, unknown>): FormData {
    return Object.keys(input || {}).reduce((formData, key) => {
      const property = input[key];
      const propertyContent: any[] =
        property instanceof Array ? property : [property];

      for (const formItem of propertyContent) {
        const isFileType = formItem instanceof Blob || formItem instanceof File;
        formData.append(
          key,
          isFileType ? formItem : this.stringifyFormItem(formItem),
        );
      }

      return formData;
    }, new FormData());
  }

  public request = async <T = any, _E = any>({
    secure,
    path,
    type,
    query,
    format,
    body,
    ...params
  }: FullRequestParams): Promise<ExtractDataProp<T>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const responseFormat = format || this.format || undefined;

    if (
      type === ContentType.FormData &&
      body &&
      body !== null &&
      typeof body === "object"
    ) {
      body = this.createFormData(body as Record<string, unknown>);
    }

    if (
      type === ContentType.Text &&
      body &&
      body !== null &&
      typeof body !== "string"
    ) {
      body = JSON.stringify(body);
    }
    const headers = {
      ...(requestParams.headers || {}),
      ...(type && type !== ContentType.FormData
        ? { "Content-Type": type }
        : {}),
    };
    const method = params.method?.toUpperCase() || "GET";

    if (method !== "GET") {
      try {
        const csrfToken = await getCsrfToken();
        headers["X-CSRF-TOKEN"] = csrfToken;
      } catch (error) {
        console.error("Failed to get CSRF token for request:", error);
        // 继续执行请求，让服务器处理CSRF验证失败
      }
    }
    return this.instance.request({
      ...requestParams,
      headers,
      params: query,
      responseType: responseFormat,
      data: body,
      url: path,
    });
  };
}
export default new HttpClient({ format: "json" }).request;